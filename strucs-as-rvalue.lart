typedef u8 = integer<8, false>;
typedef u64 = integer<64, false>;
typedef String = struct {
  data: &u8,
  length: u64
};

fn malloc(size: u64) -> &void;
fn free(ptr: &void);
fn strlen(str: &u8) -> u64;
fn strcpy(dst: &u8, src: &u8);
fn printf(fmt: &u8, str: &u8);

fn String__New(str: &u8) -> String {
  let s: String;
  s.length = strlen(str);
  s.data = malloc(sizeof<u8> * (s.length + 1));
  strcpy(s.data, str);
  return s
}

fn String__print(s: String) {
  if (s.data != nullptr) {
    printf("%s\n", s.data);
  } else {
    printf("%s\n", "<empty>");
  }
}

fn String__Delete(s: &String) {
  free(s->data);
  s->data = nullptr;
  s->length = 0;
}

fn main() {
  let s: String = String__New("Struct as rvalues");
  String__print(s);
  String__Delete(&s);
}
